/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/attendee/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Event Attendees
		 * @description Get Event Attendees
		 */
		get: operations['getEventAttendees'];
		put?: never;
		/**
		 * Add Attendees
		 * @description Register users to a specific event. This method will not process any payments. *Note* that we are continuing to test this endpoint, and it is, therefore, subject to change. Meanwhile, if you have any questions about the present state, contact us at help.bevy.com. This endpoint only works for in-person events.
		 */
		post: operations['addAttendees'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/attendee/checkin/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Checkin Attendee
		 * @description Checks in an attendee to a specific event.
		 */
		put: operations['checkinAttendee'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/attendee_search/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Attendee Search
		 * @description Retrieve a list of attendees for a particular event in the most performant way. Use instead of the GET attendee endpoint as much as possible.
		 */
		get: operations['getAttendeeSearch'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/attendee/{attendee_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Attendee by ID
		 * @description Retrieves attendee information. We recommend using the GET Attendee Search endpoint whenever possible.
		 */
		get: operations['getAttendeeById'];
		put?: never;
		post?: never;
		/**
		 * Delete attendee registration
		 * @description Removes the provided attendee registration. This method will not process any payment refund.
		 */
		delete: operations['deleteAttendee'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/attendee/remove/{event_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete all attendee registrations by event
		 * @description Removes all registrations of the provided user from a specific event. This method will not process any payment refund.
		 */
		delete: operations['deleteAllAttendeesByEvent'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/streaming/archive/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Main Stage Video
		 * @description Access the Main Stage recording URL's immediately after the recording has completed (i.e. after you hit the STOP Broadcast button on the backstage). You are able to access this information even before the event completes. All Mainstage Broadcasts are automatically recorded. If you do record a mainstage broadcast by clicking the "Record" button, then you will also have backstage recordings and you'll find them in the Session Video ID's api call.
		 */
		get: operations['getMainStageVideo'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/boe/archive/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Session Video IDs
		 * @description This endpoint allows you to access all manually recorded Session IDs (Sessions, Backstage, live Booths, and Networking Tables). This endpoint allows you to access all Manually recorded Session IDs. Use these IDs to fetch the Video URLs by using the Session Video URL's API call.
		 */
		get: operations['getSessionVideoIds'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/boe/archive/{archive_id}/download': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Session Video URLs
		 * @description This endpoint allows you to use the IDs found in Session Video IDs API call, to get the URLs for the videos.
		 */
		get: operations['getSessionVideoURLs'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/status/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Chapters Status
		 * @description This endpoint returns the status definitions for chapters found in other API calls.<br> Use this to look up what the Status value means in API calls. You will see a reference to the Status value in API calls such as /api/chapter.
		 */
		get: operations['getChapterStatus'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter_region/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Chapter Regions
		 * @description This endpoint returns the chapter regions available for use in other API calls.<br> Use this to look up what the Region value means in API calls. You will see a reference to the Region value in API calls such as /api/chapter.
		 */
		get: operations['getChapterRegions'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List chapters
		 * @description Retrieves a list of chapters.
		 */
		get: operations['listChapters'];
		put?: never;
		/**
		 * Create Chapter
		 * @description Create a new chapter.<br> There is no publicly available image upload API. Chapters can still be created but they'll have the default images.<br> You may visit the chapter settings to upload a different banner or thumbnail.
		 */
		post: operations['createChapter'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Chapter by ID
		 * @description Retrieves chapter information.
		 */
		get: operations['getChapterById'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/event/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Chapter Events
		 * @description Retrieves a list of event records for the given chapter.
		 */
		get: operations['listChapterEvents'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/member/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Chapter Members
		 * @description Retrieves a list of members for the given chapter.
		 */
		get: operations['listChapterMembers'];
		put?: never;
		/**
		 * Add Chapter Member
		 * @description Adds the current user to a chapter
		 */
		post: operations['addChapterMember'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/team/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Chapter Team
		 * @description Retrieves a list of team member records for the given chapter.
		 */
		get: operations['listChapterTeam'];
		put?: never;
		/**
		 * Add Chapter Team Member
		 * @description Creates a new chapter team member<br> If a user ID is provided, the chapter team member will be created for that user. If an email and a user ID are provided, the email must match the user’s email. If an email is provided without a user ID and the provided email does not match an existing user, then a new prospective user is created for the chapter team member. The user’s first and last name will match the “first_name” and “last_name” parameters, if included.<br> If “chapter” is not included, the chapter ID in the request URL will be used. For example, making a POST request to https://bevy.example.com/api/chapter/1/team will create a new team member for the chapter with ID of 1.
		 */
		post: operations['addChapterTeamMember'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/team/{team_id}/team/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Update Chapter Team Member
		 * @description Edits an existing chapter team member. Replace all the information with the new data.
		 */
		put: operations['updateChapterTeamMember'];
		post?: never;
		/**
		 * Delete Chapter Team Member
		 * @description Removes a user from the chapter's team. Chapter ID and team member's ID are taken from the URL.<br> Note that the user is not deleted, they're removed from the chapter team.
		 */
		delete: operations['deleteChapterTeamMember'];
		options?: never;
		head?: never;
		/**
		 * Partial Update Chapter Team Member
		 * @description Edits an existing chapter team member. Replace only the information provided in the request body.
		 */
		patch: operations['partialUpdateChapterTeamMember'];
		trace?: never;
	};
	'/chapter/{chapter_id}/members': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Add chapter's members in batch
		 * @description Add members to a chapter in batch. The members will be created asynchronously or synchronously based on the `async` parameter.
		 */
		post: operations['addChapterMembers'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chapter/{chapter_id}/member/{chapter_member_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete chapter's member
		 * @description Remove a member from a chapter.
		 */
		delete: operations['deleteChapterMember'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/cohosted_event/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List collaborating chapters
		 * @description Retrieves a list of all collaborating chapters for the given event.<br> The response will list chapters that are collaborating with an event. The source event chapter will not be listed but can be retrieved by calling the Get Event API and filling in the Source Event ID.<br> To get all source events and only source events, use the Get Event API and filter for `allows_cohosting=true`.
		 */
		get: operations['listCohostedEvents'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/cohosted_event/{cohosted_event_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete cohosted event
		 * @description Removes the provided cohosted events.
		 */
		delete: operations['deleteCohostedEvent'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/cohosted_event/add_all_chapters_as_event_cohosts/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Add all chapters as cohosts
		 * @description Add all Active Chapters as collaborators for a specific event.
		 */
		post: operations['addAllChaptersAsEventCohosts'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/cohosted_event/chapters_user_can_add_as_cohost': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Chapters a user can add as a cohost
		 * @description Returns a list of chapters that the logged-in user can edit events for.<br> The user can add any of the listed chapters as a collaborator to any event that has cohost setting enabled.<br> This view optionally accepts an event_id param, which adds additional filtering.
		 */
		get: operations['chaptersUserCanAddAsCohost'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event/counts/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Event Counts
		 * @description Get a count of all publicly viewable events.<br> The results of this endpoint are cached for one hour.
		 */
		get: operations['getEventCounts'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event/{event_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Event by ID
		 * @description Retrieves event information.
		 */
		get: operations['getEventById'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List events
		 * @description Retrieves a list of event records.
		 */
		get: operations['listEvents'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event_type/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List event types
		 * @description Retrieves a list of event type records.
		 */
		get: operations['listEventTypes'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event_type/{event_type_id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Event Type by ID
		 * @description Retrieves event type information.
		 */
		get: operations['getEventTypeById'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event/{event_id}/attendee': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List Event Attendees
		 * @description Retrieves a list of attendee records for the given event.
		 */
		get: operations['listEventAttendees'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/event/tag/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List event tags
		 * @description Retrieves a list of available event tags.
		 */
		get: operations['listEventTags'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/search/chapter/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Search chapters
		 * @description Retrieves a list of chapter records matching the given parameters.
		 */
		get: operations['searchChapters'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/search/event/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Search events
		 * @description Retrieves a list of event records matching the given parameters.
		 */
		get: operations['searchEvents'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List users
		 * @description Retrieves a list of user records.
		 */
		get: operations['listUsers'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/{user_id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get User by ID or Email
		 * @description Retrieves user information.
		 */
		get: operations['getUserByIdOrEmail'];
		put?: never;
		post?: never;
		/**
		 * Delete User
		 * @description Removes the provided user.
		 */
		delete: operations['deleteUser'];
		options?: never;
		head?: never;
		/**
		 * Update User
		 * @description Edits an existing user. Replace only the information provided in the request body.<br> If a **user has not signed** in for the first time, authorized users can update the user information using this API.<br> **After a user signs** in for the first time, only that user can update their information using this API.
		 */
		patch: operations['updateUser'];
		trace?: never;
	};
	'/user/deactivate/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Deactivate User
		 * @description Deactivates the user. The user will no longer be able to sign in or perform any actions on the platform.<br> <b>Include either `email` or `user_id`, but not both.</b>
		 */
		post: operations['deactivateUser'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/{user_id}/event/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List user's events
		 * @description Retrieves a list of event records for the given user.
		 */
		get: operations['listUserEvents'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/{user_id}/chapter': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List user's chapters
		 * @description Retrieves a list of chapter records for the given user.
		 */
		get: operations['listUserChapters'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/{user_id}/chapter_teams': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List user's chapter teams
		 * @description Retrieves a list of chapter team records for the given user.
		 */
		get: operations['listUserChapterTeams'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/create_prospective_user/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create Prospective User
		 * @description Creates a prospective user. A prospective user is a user that has not signed in for the first time.
		 */
		post: operations['createProspectiveUser'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/mail/optout/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Opt out of emails
		 * @description Opt a user out of all newsletter email lists. The user will still receive system and attendee-specific emails.<br> Even though the value is updated, this change is not reflected in the member details in the Chapter dashboard.
		 */
		post: operations['optOutOfEmails'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user/counts/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get User Counts
		 * @description Retrieves the total number of users on the site, as well as the number of users in each of the following roles <ul> <li>User</li> <li>Prospective User</li> <li>Administrator</li> <li>Inactive</li> </ul>
		 */
		get: operations['getUserCounts'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** 403 Error */
		'403Error': {
			/** @example You do not have permission to perform this action. */
			details?: string;
		};
		/** 400 Error */
		'400Error': {
			/** @example The request is invalid. The rational will be in the response body. */
			details?: string;
		};
		/** 401 Error */
		'401Error': {
			/** @example Authentication credentials were not provided */
			details?: string;
		};
		/** 404 Error */
		'404Error': {
			/** @example Not found. */
			details?: string;
		};
		Image: {
			/** @example https://res.cloudinary.com/startup-grind/image/upload/.../image.png */
			url?: string;
			/** @example image.png */
			path?: string;
			/** @example 720 */
			thumbnail_width?: number;
			/** @example 540 */
			thumbnail_height?: number;
			/** @example auto */
			thumbnail_format?: string;
			/** @example https://res.cloudinary.com/startup-grind/image/upload/.../image.png */
			thumbnail_url?: string;
		};
		Form: {
			/** @example 2024-01-09T17:59:22Z */
			created_date: string;
			fields: {
				/** @example What is your name? */
				label: string;
				/** @example John Doe */
				value?: string;
			}[];
		};
		User: {
			authentication_providers?: {
				/** @example google-oauth2 */
				provider?: string;
				/** @example 1234 */
				provider_user_id?: number;
			}[];
			avatar?: components['schemas']['Image'];
			/** @example Bevy */
			company?: string;
			/** @example https://res.cloudinary.com/startup-grind/image/fetch/.../image.jpeg */
			cropped_avatar_url?: string;
			extra_data?: Record<string, never>;
			/** @example Mr. */
			title?: string;
			role?: {
				/** @example 1234 */
				id?: number;
				/** @example Prospective */
				name?: string;
				/** @example Prospective Member */
				description?: string;
				/** @example true */
				user_active_status?: boolean;
			};
			/** @example user@mail.com */
			email: string;
			/** @example John */
			first_name: string;
			/** @example 1234 */
			id: number;
			/** @example Doe */
			last_name: string;
			username: string;
		};
		GetAttendeeById: {
			/** @example CMXA24067985 */
			attendee_code: string;
			/** @example 00eaf4f4-3c12-4892-bb3a-ee347308b132 */
			attendee_uuid: string;
			avatar: components['schemas']['Image'];
			/** @example false */
			can_delete: boolean;
			/** @example null */
			chapter_member_id: number | null;
			/** @example 2024-01-09T17:59:22Z */
			checkin_date: string | null;
			/** @example null */
			cohost_registration_chapter: number | null;
			/** @example null */
			cohost_registration_chapter_title: string | null;
			/** @example Bevy */
			company: string;
			/** @example 2024-01-09T17:59:22Z */
			created_date: string;
			/** @example null */
			deleted_date: string | null;
			/** @example null */
			discount_code: string | null;
			/** @example attendee@mail.com */
			email: string;
			/** @example 1234 */
			event: number;
			/** @example 1234 */
			event_chapter_id: number;
			/** @example false */
			featured: boolean | null;
			/** @example John */
			first_name: string;
			/** @example 2345 */
			id: number;
			/** @example true */
			is_checked_in: boolean;
			/** @example Doe */
			last_name: string;
			/** @example *****@mail.com */
			masked_email: string;
			/** @example John Doe */
			name: string;
			/** @example 9498b84823cc4faa8ed7b74110f04015 */
			order_id: string;
			/** @example  */
			origin_app: string;
			/** @example USD */
			paid_currency: string;
			/** @example 23.15 */
			paid_price: number;
			/** @example /u/mpbq9e */
			profile_url: string;
			/** @example registered */
			status: string;
			surveys: {
				pre_order?: components['schemas']['Form'];
				post_order?: components['schemas']['Form'];
				post_event_team?: components['schemas']['Form'];
			};
			/** @example Virtual */
			ticket_audience_type_enum_value: string;
			/** @example General Admission */
			ticket_title: string;
			/** @example Mr. */
			title: string;
			/** @example johndoe */
			twitter: string;
			user: components['schemas']['User'];
			user_id: number;
		};
		GetAttendeeSearchResult: {
			/** @example 00eaf4f4-3c12-4892-bb3a-ee347308b132 */
			attendee_uuid: string;
			/** @example false */
			can_delete: boolean;
			/** @example null */
			chapter_member_id: number | null;
			/** @example null */
			cohost_registration_chapter: number | null;
			/** @example null */
			cohost_registration_chapter_title: string | null;
			/** @example 2024-01-09T17:59:22Z */
			created_date: string;
			/** @example attendee@mail.com */
			email: string;
			/** @example 1234 */
			event: number;
			/** @example John */
			first_name: string;
			/** @example 2345 */
			id: number;
			/** @example true */
			is_checked_in: boolean;
			/** @example Doe */
			last_name: string;
			/** @example 9498b84823cc4faa8ed7b74110f04015 */
			order_id: string;
			/** @example  */
			origin_app: string;
			/** @example USD */
			paid_currency: string;
			/** @example 23.15 */
			paid_price: number;
			/** @example Virtual */
			ticket_audience_type_enum_value: string;
			/** @example 0 */
			ticket_price_paid: number;
			/** @example General Admission */
			ticket_title: string;
		};
		GetAttendeesResult: {
			/** @example 2345 */
			id: number;
			/** @example John */
			first_name: string;
			/** @example Doe */
			last_name: string;
			/** @example attendee@mail.com */
			email: string;
			/** @example 1243 */
			user_id: number;
			/** @example 2024-01-09T17:59:22Z */
			created_date: string;
			/** @example true */
			is_checked_in: boolean;
		};
		GetAttendees: {
			/** @example 1000 */
			count: number;
			results: components['schemas']['GetAttendeesResult'][];
			pagination?: components['schemas']['Pagination'];
			links: components['schemas']['Links'];
		};
		GetAttendeeSearch: {
			/** @example 1000 */
			count: number;
			results: components['schemas']['GetAttendeeSearchResult'][];
			pagination?: components['schemas']['Pagination'];
			links: components['schemas']['Links'];
		};
		Links: {
			/** @example null */
			previous: string | null;
			/** @example null */
			next: string | null;
		};
		Pagination: {
			/** @example 1 */
			current_page: number;
			/** @example 2 */
			next_page: number | null;
			/** @example 500 */
			page_size: number;
			/** @example null */
			previous_page: number | null;
		};
		GetMainStageVideo: {
			/** @example 1 */
			count: number;
			/** @example null */
			next: string | null;
			/** @example null */
			previous: string | null;
			results: {
				/** @example 7890 */
				id: number;
				/** @example https://stream.mux.com/n01sm00/high.mp4?download=Recording_-_01:23:45 */
				url: string;
				/**
				 * @description Duration of the video in seconds
				 * @example 24
				 */
				duration: number;
				/** @example 2024-01-09T17:59:22Z */
				created_date: string;
			}[];
		};
		GetSessionVideoIds: {
			/** @example 1 */
			count: number;
			/** @example null */
			next: string | null;
			/** @example null */
			previous: string | null;
			results: {
				/** @example 8304e548-ba76-4785-b9e4 */
				id: string;
				/** @example 2024-01-09T17:59:22Z */
				created_date: string;
				/** @example uploaded */
				status: string;
				/**
				 * @description Duration of the video in seconds
				 * @example 24
				 */
				duration: number;
				/**
				 * @description Size of the video in bytes
				 * @example 666368217
				 */
				size: number;
				/** @example 00eaf4f4-3c12-4892-bb3a-ee347308b132 */
				live_session_uuid: string;
			}[];
		};
		ChapterStatus: {
			/** @example 1 */
			count: number;
			/** @example null */
			next: string | null;
			/** @example null */
			previous: string | null;
			results: {
				/** @example 1 */
				id: number;
				/** @example true */
				active: boolean;
				/** @example Active */
				title: string;
			}[];
		};
		CreateChapterBody: {
			/** @example Chapter 2024 */
			title: string;
			/** @example <p>lorem ipsum</p> */
			description: string;
			/** @example en */
			language: string;
			/** @example true */
			hide_country_info?: boolean;
			/** @example EG */
			country: string;
			/** @example Cairo Governorate */
			state?: string;
			/** @example Cairo */
			city: string;
			/** @example Africa/Cairo */
			timezone: string;
			/** @example 30.0444196 */
			latitude?: number;
			/** @example 31.2357116 */
			longitude?: number;
			/** @example 2 */
			status: string;
			/** @example true */
			is_hidden?: boolean;
			/** @example false */
			is_production_chapter: boolean;
			/** @example true */
			is_city: boolean;
			/** @example 12 */
			region: number;
			/** @example 8 */
			parent_chapter: string;
			/** @example USD */
			currency: string;
			/** @example 5 */
			blog_category?: string;
			/** @example bevy */
			twitter_handle?: string;
			/** @example https://flickr.com/ */
			flickr_page?: string;
			/** @example https://facebook.com/ */
			facebook_page?: string;
			/** @example https://linkedin.com/ */
			linkedin_page?: string;
			/** @example bevy */
			instagram_handle?: string;
		};
		ChapterPhoto: {
			/** @example 1234 */
			id: number;
			/** @example 1 */
			order: number;
			picture: components['schemas']['Image'];
		};
		ChapterTeamRole: {
			/** @example 1234 */
			id?: number;
			/** @example Lead Organizer Role */
			name?: string;
			/** @example Full chapter permissions */
			description?: string;
			permissions?: string[];
			/** @example true */
			visible?: boolean;
		};
		ChapterTeamMember: {
			/** @example 1234 */
			id?: number;
			user?: components['schemas']['User'];
			role?: components['schemas']['ChapterTeamRole'];
			/** @example Lead Organizer */
			title?: string;
		};
		DocumentStatusData: {
			/** @example 1 */
			document?: number;
			/** @example Jan 03, 2025 */
			formatted_expiration_date?: string;
			/** @example 1234 */
			id?: number;
			/** @example accepted */
			status?: string;
			/** @example 2024-01-03T06:17:46.747475Z */
			status_updated_ts?: string;
			/** @example 2024-01-03T06:17:46.747475Z */
			temporary_access_expiration_ts?: string;
			/** @example 1234 */
			user?: number;
		};
		ChapterTeamMemberFull: components['schemas']['ChapterTeamMember'] & {
			/** @example 2024-01-09T17:59:22Z */
			activated_date?: string;
			chapter?: components['schemas']['Chapter'];
			/** @example 2024-01-09T17:59:22Z */
			created_date?: string;
			/** @example true */
			is_payment_lead?: boolean;
			/** @example 1 */
			order?: number;
			/** @example true */
			user_can_edit?: boolean;
			/** @example true */
			visible?: boolean;
			document_status_data?: components['schemas']['DocumentStatusData'];
		};
		Chapter: {
			/**
			 * @description Whether this groups is active or not.
			 * @example true
			 */
			active?: boolean;
			/** @example true */
			allow_internal_list_management?: boolean;
			/** @example 0 */
			available_months_last_12?: number;
			/**
			 * @description The vertical crop of the group's banner. The value should be in the range of 0 and 100.
			 * @example 0
			 */
			banner_crop_vertical?: number;
			/**
			 * @description The id of the blog category to associate with this group.
			 * @example 4
			 */
			blog_category?: number | null;
			/** @example Franklin (AL) */
			chapter_location?: string;
			chapter_photos?: components['schemas']['ChapterPhoto'][];
			/** @example Franklin */
			city?: string;
			/** @example false */
			could_update_meetup?: boolean;
			/**
			 * @description The group's country in ISO 3166-2 two-letter format.
			 * @example AL
			 */
			country?: string;
			/** @example Albania */
			country_name?: string;
			/** @example 2024-02-02T13:17:59.903551Z */
			created?: string;
			/** @example https://res.cloudinary.com/startup-grind/image/fetch/.../image.jpeg */
			cropped_banner_url?: string;
			/**
			 * @description The string id of the currency for this group.
			 * @example USD
			 */
			currency?: string;
			/**
			 * @description A brief description of the group.
			 * @example lorem ipsum
			 */
			description?: string | null;
			/** @example 0 */
			event_activity_percentage_last_12?: number;
			/** @example https://facebook.com/ */
			facebook_page?: string | null;
			/** @example https://youtube.com/ */
			featured_video_url?: string | null;
			/** @example https://flickr.com/ */
			flickr_page?: string | null;
			/** @example [
			 *       0,
			 *       0,
			 *       -1,
			 *       -1,
			 *       -1
			 *     ] */
			health_indicator?: number[];
			/** @example 50 */
			id?: number;
			/** @example false */
			import_wp_events?: boolean;
			/** @example 1234 */
			imported_id?: number | null;
			/** @example bevy */
			instagram_handle?: string | null;
			integrations?: {
				meetup: {
					/** @example https://www.meetup.com/Awesome-NYC/ */
					url?: string;
					/** @example awesome-nyc */
					urlname?: string;
					/** @example Awesome NYC */
					name?: string;
					/** @example [
					 *       "Tech",
					 *       "Business"
					 *     ] */
					topics?: string[];
					/** @example Awesome NYC */
					description?: string;
				} | null;
			};
			/** @example false */
			is_city?: boolean;
			/**
			 * @description Whether this group should be hidden to those without the link or not.
			 * @example false
			 */
			is_hidden?: boolean;
			/** @example true */
			is_production_chapter?: boolean;
			/**
			 * @description Whether to hide the country info or not.
			 * @example false
			 */
			hide_country_info?: boolean;
			/**
			 * @description The latitude of the group's location.
			 * @example 30.0444196
			 */
			latitude?: number | null;
			/** @example https://linkedin.com/ */
			linkedin_page?: string | null;
			logo?: components['schemas']['Image'] & unknown;
			/**
			 * @description The longitude of the group's location.
			 * @example 31.2357116
			 */
			longitude?: number | null;
			/** @example 1234567890abcdefg */
			mailchimp_api_key?: string | null;
			/** @example 1234567890 */
			mailchimp_list_id?: string | null;
			/**
			 * @description The groups active associated partner ids.
			 * @example [
			 *       1,
			 *       3
			 *     ]
			 */
			media_partners?: number[];
			/**
			 * @description The groups inactive associated partner ids.
			 * @example [
			 *       2
			 *     ]
			 */
			media_partners_inactive?: number[];
			/** @example 1234567890abcdefg */
			meetup_api_key?: string | null;
			/** @example Awesome NYC */
			meetup_group?: string | null;
			/** @example 0 */
			monthly_events_last_12?: number;
			/** @example false */
			on_team?: boolean;
			/** @example https://instance.bevy.com/chapter-2024/payee-setup */
			payee_setup_process_url?: string;
			chapter_team?: components['schemas']['ChapterTeamMember'][];
			/**
			 * @description The user id of the group's payment lead.
			 * @example 10
			 */
			payment_lead?: number | null;
			picture?: components['schemas']['Image'];
			/**
			 * @description The id of this group's region. A list of regions can be found in the region API.
			 * @example USA
			 */
			region?: string;
			/** @example false */
			rsvp_events_only?: boolean;
			/** @example chapter-2024 */
			slug?: string;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			sponsors?: number[];
			/** @example [
			 *       3
			 *     ] */
			sponsors_inactive?: number[];
			/** @example New York */
			state?: string;
			/**
			 * @description The id of this group's status. A list of ids can be found in the group status API.
			 * @example 2
			 */
			status?: number;
			/**
			 * @description The ticket revenue share percentage between the chapter and HQ on a scale from 0.0 to 1.0.
			 * @example 0
			 */
			ticket_revenue_share_percentage?: number;
			/**
			 * @description The group's timezone. Example: America/Chicago
			 * @example Pacific/Niue
			 */
			timezone?: string;
			/** @example -1100 */
			timezone_utc_offset?: string;
			/** @example Chapter 2024 */
			title?: string;
			/** @example 0 */
			total_tickets_sold_lifetime?: number;
			/**
			 * @description The group's Twitter handle. The @ symbol is not required.
			 * @example bevy
			 */
			twitter_handle?: string | null;
			/** @example /chapter-2024/ */
			relative_url?: string;
			/** @example https://instance.bevy.com/chapter-2024/ */
			url?: string;
			/** @example false */
			use_external_ticketing?: boolean;
			/** @example false */
			use_new_newsletters?: boolean;
			/** @example https://chapter-2024.com/ */
			website?: string;
			/**
			 * @description The language id for this group in a lowercase ISO 639 format.
			 * @example en
			 */
			language?: string;
			chapter_lists?: Record<string, never>;
			external_extra_data?: Record<string, never>;
			/** @example 100 */
			members_count?: number;
			/** @example 8 */
			parent_chapter?: number | null;
		};
		ListChapters: {
			/** @example 1 */
			count?: number;
			/** @example null */
			next?: string | null;
			/** @example null */
			previous?: string | null;
			results?: components['schemas']['Chapter'][];
			status_counter?: {
				/** @example 10 */
				active?: number;
				/** @example 8 */
				inactive?: number;
				/** @example 18 */
				all?: number;
			};
		};
		Ticket: {
			/** @example 1234 */
			access_code?: string | null;
			/** @example IN_PERSON */
			audience_type?: string;
			/** @example 10 */
			available?: number;
			/** @example false */
			can_delete?: boolean;
			/** @example USD */
			currency?: string;
			/** @example lorem ipsum */
			description?: string | null;
			/** @example 1234 */
			discount_code?: string | null;
			/** @example 1234 */
			event?: number;
			/** @example 1234 */
			id?: number;
			/** @example true */
			is_for_sale?: boolean;
			/** @example 10 */
			max_per_order?: number;
			/** @example 0 */
			min_per_order?: number;
			/** @example 0 */
			price?: number;
			/** @example 0 */
			reported_fees?: number;
			/** @example 0 */
			reported_original_price?: number;
			/** @example 0 */
			reported_price?: number;
			/** @example 2024-03-30T12:28:00-09:00 */
			sale_end_date?: string;
			/** @example true */
			sale_end_date_derived_from_event_end?: boolean;
			/** @example 2024-03-30T12:28:00 */
			sale_end_date_naive?: string;
			/** @example 2023-05-01T12:29:15-09:00 */
			sale_start_date?: string;
			/** @example true */
			sale_start_date_derived_from_event_publish?: boolean;
			/** @example 2023-05-01T12:29:15 */
			sale_start_date_naive?: string;
			/** @example General Admission */
			title?: string;
			/** @example 10 */
			total_count?: number;
			/** @example 0 */
			used?: number;
			/** @example true */
			visible?: boolean;
			/** @example 0 */
			waitlist_count?: number;
			/** @example false */
			waitlist_enabled?: boolean;
		};
		EventSummary: {
			/** @example false */
			allows_cohosting?: boolean;
			/** @example 0 */
			checkin_count?: number;
			/** @example https://instance.bevy.com/events/details/chapter-2024-presents/ */
			cohost_registration_url?: string;
			/** @example 2024-01-09T17:59:22Z */
			end_date?: string | null;
			/** @example 1234 */
			id?: number;
			/** @example 2024-01-09T17:59:22Z */
			start_date?: string | null;
			/** @example Draft */
			status?: string;
			/** @example Chapter 2024 */
			title?: string | null;
			/** @example 0 */
			total_attendees?: number;
			/** @example 0 */
			total_revenue?: number | null;
			/** @example false */
			total_tickets_sold?: boolean;
			/** @example https://instance.bevy.com/events/details/chapter-2024-presents/ */
			url?: string;
		};
		EventFull: components['schemas']['EventSummary'] & {
			/** @example America/Chicago */
			_timezone?: string | null;
			/** @example false */
			allow_automated_emails_when_hidden?: boolean;
			/** @example /events/attendee_list/chapter-2024-presents/csv */
			attendee_csv_list_url?: string;
			/** @example /events/attendee_list/chapter-2024-presents */
			attendee_list_url?: string;
			/** @example HYBRID */
			audience_type?: string;
			banner?: components['schemas']['Image'];
			/** @example 0 */
			banner_crop_vertical?: number;
			bv_live_session_uuid?: string | null;
			chapter?: components['schemas']['Chapter'];
			/** @example false */
			chat_disabled?: boolean;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			companies?: number[];
			/** @example Bevy */
			company?: string | null;
			/** @example bevy */
			company_twitter?: string | null;
			/** @example false */
			completed?: boolean;
			/** @example false */
			could_update_meetup?: boolean;
			/** @example https://res.cloudinary.com/startup-grind/image/fetch/.../image.jpeg */
			cropped_banner_url?: string;
			/** @example USD */
			currency?: string;
			/** @example <p>lorem ipsum</p> */
			description?: string | null;
			/** @example lorem ipsum */
			description_short?: string | null;
			discount_code_usable?: {
				/** @example No promotion code provided. */
				detail?: string;
				/** @example false */
				value?: boolean;
			};
			/** @example 2024-01-09T17:59:22Z */
			end_date_iso?: string | null;
			/** @example 2024-01-09T17:59:22Z */
			end_date_naive?: string | null;
			/** @example Pacific/Niue */
			event_timezone?: string;
			/** @example 4 */
			event_type?: number;
			/** @example true */
			event_type_allow_new_agenda?: boolean;
			event_type_logo?: components['schemas']['Image'];
			/** @example false */
			event_type_rsvp_only?: boolean;
			/** @example virtual-conference */
			event_type_slug?: string;
			/** @example Virtual Conference */
			event_type_title?: string;
			event_wrapup_photos?: components['schemas']['Image'][];
			/** @example https://eventbrite.com/ */
			eventbrite_url?: string | null;
			/** @example 1234567890 */
			facebook_pixel?: string | null;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			facilitators?: number[];
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			featured_attendees?: number[];
			/** @example false */
			hide_agenda_on_event_page?: boolean;
			/** @example false */
			hide_location?: boolean;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			hosts?: number[];
			/** @example false */
			internal_payment_support?: boolean;
			/** @example false */
			is_hidden?: boolean;
			/** @example false */
			is_many_to_many_virtual_event?: boolean;
			/** @example false */
			is_test?: boolean;
			/** @example true */
			is_virtual_event?: boolean;
			/** @example https://instance.bevy.com/j/2cn2nkff999pf/ */
			join_virtual_event_url?: string;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			judges?: number[];
			/** @example https://instance.bevy.com/lobby/2cn2nkff999pf/ */
			lobby?: string | null;
			lobby_banner?: components['schemas']['Image'];
			/** @example [] */
			lobby_message?: string;
			/** @example https://youtube.com/ */
			lobby_video_url?: string | null;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			media_partners?: number[];
			/** @example Awesome NYC */
			meetup_group?: string | null;
			/** @example https://meetup.com/ */
			meetup_url?: string | null;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			mentors?: number[];
			/** @example BVC */
			mobile_relative_event_type?: string;
			/** @example false */
			moderated_qa_enabled?: boolean;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			moderators?: number[];
			/** @example 9 */
			network_segment_max_capacity?: number;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			panelists?: number[];
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			partners_list?: number[];
			payment_client_tokens?: {
				/** @example pk_live_uEMM7egovNquOa8IZp99LXB */
				stripe?: string;
			};
			/** @example [
			 *       "Stripe",
			 *       "Paypal"
			 *     ] */
			payment_methods?: string[];
			/** @example bevypay */
			payment_processor_slug?: string;
			picture?: components['schemas']['Image'];
			/** @example 2024-01-09T17:59:22Z */
			publish_date?: string | null;
			published_by?: {
				/** @example 1234 */
				id?: number;
				/** @example user@mail.com */
				email?: string;
				/** @example user */
				first_name?: string;
				/** @example user */
				last_name?: string;
			};
			/** @example 1234 */
			recurring_event?: number | null;
			/** @example true */
			registration_required?: boolean;
			/** @example /events/details/chapter-2024-presents/ */
			relative_url?: string;
			/** @example false */
			sharing_disabled?: boolean;
			/** @example mjr6kf */
			short_id?: string;
			/** @example true */
			show_map?: boolean;
			/** @example false */
			show_short_description_on_event_banner?: boolean;
			/** @example https://slideshare.com/ */
			slideshare_url?: string | null;
			/** @example 1234 */
			speaker?: number | null;
			/** @example speaker */
			speaker_twitter?: string | null;
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			speakers?: number[];
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			sponsors?: number[];
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			sponsors_gold?: number[];
			/** @example [
			 *       1,
			 *       2
			 *     ] */
			sponsors_iron?: number[];
			/** @example 2024-01-09T17:59:22Z */
			start_date_iso?: string | null;
			/** @example 2024-01-09T17:59:22Z */
			start_date_naive?: string | null;
			/** @example https://instance.bevy.com/e/mj77kf/ */
			static_url?: string;
			/** @example [
			 *       "Tech",
			 *       "Business"
			 *     ] */
			tags?: string[];
			tickets?: components['schemas']['Ticket'][];
			/** @example CST */
			timezone_abbreviation?: string | null;
			/** @example 100 */
			total_capacity?: number | null;
			/** @example true */
			use_daily?: boolean;
			/** @example false */
			use_external_ticketing?: boolean;
			/** @example true */
			use_featured_attendees?: boolean;
			/** @example 123 Main St */
			venue_address?: string | null;
			/** @example Franklin */
			venue_city?: string | null;
			/** @example Franklin */
			venue_name?: string | null;
			/** @example 12345 */
			venue_zip_code?: string | null;
			/** @example https://youtube.com/ */
			video_url?: string | null;
			/** @example lorem ipsum */
			virtual_event_instructions?: string | null;
			/** @example internal */
			virtual_event_type?: string;
			/** @example https://instance.bevy.com/venue/2cn2nkff999pf/ */
			virtual_venue_link?: string | null;
			/** @example false */
			visible_on_parent_chapter_only?: boolean;
		};
		ChapterMemberList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: {
				/** @example 2024-01-09T17:59:22Z */
				created_date?: string;
				/** @example 1234 */
				id?: number;
				user?: {
					/** @example 1234 */
					id?: number;
					/** @example John Doe */
					full_name?: string;
					/** @example /u/mjy7yj/ */
					profile_url?: string;
				};
			}[];
		};
		ChapterEventList: {
			/** @example 1 */
			count?: number;
			/** @example null */
			next?: string | null;
			/** @example null */
			previous?: string | null;
			results?: components['schemas']['EventSummary'][];
			status_counter?: {
				/** @example 10 */
				Canceled?: number;
				/** @example 80 */
				Completed?: number;
				/** @example 18 */
				Draft?: number;
				/** @example 11 */
				Published?: number;
				/** @example 1 */
				Live?: number;
				/** @example 0 */
				Pending?: number;
			};
		};
		ChapterTeamList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['ChapterTeamMemberFull'][];
		};
		ChapterTeamMemberBody: {
			/**
			 * @description Visible title of team member
			 * @example Chapter Lead
			 */
			title?: string;
			/**
			 * @description User ID (user IDs can be found at https://instance.bevy.com/api/user)
			 * @example 1234
			 */
			user?: number;
			/** @example user@mail.com */
			email?: string;
			/**
			 * @description Chapter ID (chapter IDs can be found at https://instance.bevy.com/api/chapter)
			 * @example 1234
			 */
			chapter?: number;
			/**
			 * @description Role ID  (role IDs can be found at https://instance.bevy.com/api/chapter_role)
			 * @example 1234
			 */
			role?: number;
			/**
			 * @description Whether the team member is visible on event and chapter pates. Default True
			 * @example true
			 */
			visible?: boolean;
			/**
			 * @description Hierarchy on event/chapter pages
			 * @example 1
			 */
			order?: number;
			/** @example John Doe */
			name?: string;
			/** @example John */
			first_name?: string;
			/** @example Doe */
			last_name?: string;
			/**
			 * @description Whether the team member should receive chapter team emails. Default True
			 * @example true
			 */
			send_chapter_team_emails?: boolean;
		};
		CohostedEvent: {
			/**
			 * @description The ID of the source event
			 * @example 1
			 */
			source_event?: number;
			/**
			 * @description The ID of the source event chapter
			 * @example 7
			 */
			source_event_chapter?: number;
			/**
			 * @description The ID of the user who requested the cohosted event
			 * @example 10
			 */
			requested_by?: number;
			/**
			 * @description The date and time the cohosted event was deleted
			 * @example 2022-05-20T21:34:19.468835Z
			 */
			deleted_at?: string | null;
			/**
			 * @description The ID of the user who deleted the cohosted event
			 * @example 10
			 */
			deleted_by?: number | null;
			chapter?: components['schemas']['Chapter'];
			/** @example 2022-05-20T21:34:19.468835Z */
			created?: string;
		};
		CohostedEventList: {
			/** @example 1 */
			count?: number;
			/** @example null */
			next?: string | null;
			/** @example null */
			previous?: string | null;
			results?: components['schemas']['CohostedEvent'][];
		};
		EventList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['EventSummary'][];
		};
		EventTypeList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['EventTypeSummary'][];
		};
		EventTypeSummary: {
			/** @example 18 */
			id?: number;
			/** @example 0 */
			order?: number;
			/** @example my-event-type */
			slug?: string;
			/** @example My event type */
			title?: string;
		};
		EventType: {
			/** @example false */
			allow_companies?: boolean;
			/** @example false */
			allow_facilitators?: boolean;
			/** @example false */
			allow_hosts?: boolean;
			/** @example false */
			allow_judges?: boolean;
			/** @example false */
			allow_mentors?: boolean;
			/** @example false */
			allow_moderators?: boolean;
			/** @example false */
			allow_multiday_events?: boolean;
			/** @example false */
			allow_new_agenda?: boolean;
			/** @example false */
			allow_panelists?: boolean;
			/** @example false */
			allow_recurring?: boolean;
			/** @example false */
			allow_registration_as_a_guest?: boolean;
			/** @example false */
			allow_speakers?: boolean;
			/** @example false */
			allow_tags?: boolean;
			banner?: components['schemas']['Image'];
			/** @example 0 */
			banner_crop_vertical?: number;
			chapters?: {
				/** @example Egypt */
				chapter_location?: string;
				/** @example 30 */
				id?: number;
				/** @example University of Science */
				title?: string;
			}[];
			/** @example 0 */
			companies_max?: number;
			/** @example 0 */
			companies_min?: number;
			/** @example https://res.cloudinary.com/startup-grind/image/upload/c_fill,dpr_2.0,f_auto,g_center,q_auto:good/v1/gcs/platform-data-support/contentbuilder/57c.pic2_olPYQoS.png */
			default_event_banner_image?: string;
			/** @example https://res.cloudinary.com/startup-grind/image/upload/c_fill,dpr_2.0,f_auto,g_center,q_auto:good/v1/gcs/platform-data-support/contentbuilder/57c.pic2_olPYQoS.png */
			default_event_thumbnail_image?: string;
			/** @example 2024-01-09T17:59:22Z */
			deleted_date?: string | null;
			/** @example lorem ipsum */
			description?: string | null;
			/** @example 0 */
			facilitators_max?: number;
			/** @example 0 */
			facilitators_min?: number;
			/** @example 0 */
			hosts_max?: number;
			/** @example 0 */
			hosts_min?: number;
			/** @example 1234 */
			id?: number;
			/** @example 0 */
			judges_max?: number;
			/** @example 0 */
			judges_min?: number;
			logo?: components['schemas']['Image'];
			/** @example 0 */
			mentors_max?: number;
			/** @example 0 */
			mentors_min?: number;
			/** @example 0 */
			moderators_max?: number;
			/** @example 0 */
			moderators_min?: number;
			/** @example 0 */
			order?: number;
			/** @example 1234 */
			organization?: number;
			/** @example 0 */
			panelists_max?: number;
			/** @example 0 */
			panelists_min?: number;
			/** @example false */
			require_companies?: boolean;
			/** @example false */
			require_facilitators?: boolean;
			/** @example false */
			require_hosts?: boolean;
			/** @example false */
			require_judges?: boolean;
			/** @example false */
			require_mentors?: boolean;
			/** @example false */
			require_moderators?: boolean;
			/** @example false */
			require_panelists?: boolean;
			/** @example false */
			require_speakers?: boolean;
			/** @example false */
			require_tags?: boolean;
			/** @example false */
			rsvp_only?: boolean;
			/** @example my-event-type */
			slug?: string;
			/** @example 0 */
			speakers_max?: number;
			/** @example 0 */
			speakers_min?: number;
			sponsor_tiers?: {
				/** @example 1234 */
				id?: number;
				/** @example 0 */
				order?: number;
				/** @example platinum-sponsor */
				slug?: string;
				/** @example Platinum Sponsor */
				title?: string;
			}[];
			/** @example 0 */
			tags_max?: number;
			/** @example 0 */
			tags_min?: number;
			/** @example My event type */
			title?: string;
			/** @example false */
			use_external_ticketing?: boolean;
			/** @example false */
			virtual_event_only?: boolean;
			/** @example true */
			virtual_event_url_required?: boolean;
		};
		SearchChapter: {
			/** @example Abbottabad (PK) */
			chapter_location?: string;
			/** @example Abbottabad */
			city?: string;
			/** @example Pakistan */
			country?: string;
			/** @example PK */
			country_code?: string;
			/** @example 1234 */
			id?: number;
			/** @example false */
			is_city?: boolean;
			logo?: components['schemas']['Image'];
			/** @example 100 */
			member_count?: number | null;
			picture?: components['schemas']['Image'];
			/** @example Asia */
			region?: string;
			/** @example 1234 */
			region_id?: number;
			/** @example KPK */
			state?: string | null;
			team?: {
				/** @example John Doe */
				full_name?: string;
				/** @example 1234 */
				id?: number;
			}[];
			/** @example University of Science */
			title?: string;
			/** @example https://instance.bevy.com/university-of-science/ */
			url?: string;
		};
		SearchChapterResult: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['SearchChapter'][];
		};
		SearchEvent: {
			_geoloc?: {
				/** @example 39.5696005 */
				lat?: number;
				/** @example 2.6501603 */
				lng?: number;
			};
			/** @example Virtual */
			audience_type?: string;
			banner?: components['schemas']['Image'];
			/** @example Palma */
			chapter_city?: string;
			/** @example 9 */
			chapter_id?: number;
			/** @example Palma, IB (ES) */
			chapter_location?: string;
			/** @example My Chapter */
			chapter_title?: string;
			/** @example https://support.bevylabs.com/anas-chapter/ */
			chapter_url?: string;
			/** @example  */
			cropped_banner_url?: string;
			/** @example Testing End Event for all warning */
			description_short?: string;
			/** @example 2022-05-26T21:00:00+02:00 */
			end_date_iso?: string;
			/** @example Europe/Madrid */
			event_timezone?: string;
			/** @example 3 */
			event_type?: number;
			/** @example false */
			event_type_allow_new_agenda?: boolean;
			/** @example true */
			event_type_rsvp_only?: boolean;
			/** @example virtual-event-type */
			event_type_slug?: string;
			/** @example Virtual Event type */
			event_type_title?: string;
			/** @example 98 */
			id?: number;
			/** @example in-person */
			mobile_relative_event_type?: string;
			/** @example 98 */
			objectID?: string;
			/** @example  */
			picture_url?: string;
			/** @example /events/details/support-anas-chapter-presents-testing-end-event-for-all-warning-1/ */
			relative_url?: string;
			/** @example 2022-05-26T12:30:00+02:00 */
			start_date_iso?: string;
			/** @example Testing End Event for all warning */
			title?: string;
			/** @example https://support.bevylabs.com/events/details/support-anas-chapter-presents-testing-end-event-for-all-warning-1/ */
			url?: string;
			/** @example Parque Saavedra */
			venue_address?: string | null;
			/** @example CABA */
			venue_city?: string | null;
			/** @example MSQ */
			venue_name?: string | null;
			/** @example CP12423 */
			venue_zip_code?: string | null;
			/** @example internal */
			virtual_event_type?: string;
		};
		SearchEventResult: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['SearchEvent'][];
		};
		UserList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: components['schemas']['User'][];
		};
		UserEventsList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: {
				chapter?: {
					/** @example 1234 */
					id?: number;
					/** @example University of Science */
					title?: string;
					/** @example https://instance.bevy.com/university-of-science/ */
					url?: string;
					/** @example Abbottabad */
					city?: string;
				};
				/** @example 2024-01-09T17:59:22Z */
				checkin_date?: string;
				/** @example 2024-01-09T17:59:22Z */
				created_date?: string;
				event?: components['schemas']['EventSummary'];
			}[];
		};
		UserChaptersList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: {
				chapter?: {
					/** @example Pakistan */
					country_name?: string;
					/** @example 1234 */
					id?: number;
					logo?: components['schemas']['Image'];
					/** @example 100 */
					members_count?: number;
					picture?: components['schemas']['Image'];
					/** @example University of Science */
					title?: string;
				};
				/** @example 2024-01-09T17:59:22Z */
				created_date?: string;
			}[];
		};
		UserChapterTeamsList: {
			/** @example 1 */
			count?: number;
			links?: components['schemas']['Links'];
			pagination?: components['schemas']['Pagination'];
			results?: {
				chapter?: {
					/** @example Egypt */
					chapter_location?: string;
					/** @example 1234 */
					id?: number;
					/** @example University of Science */
					title?: string;
				};
				/** @example 2024-01-09T17:59:22Z */
				created_date?: string;
				/** @example 1234 */
				id?: number;
				/** @example true */
				is_payment_lead?: boolean;
				document_status_data?: components['schemas']['DocumentStatusData'];
				role?: {
					/** @example 1234 */
					id?: number;
					/** @example Chapter Lead */
					name?: string;
					/** @example Full chapter permissions (events, settings, payments, team management, sponsors, invoicing, newsletters) */
					description?: string;
					/** @example true */
					visible?: boolean;
					permissions?: Record<string, never>[];
				};
			}[];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getEventAttendees: {
		parameters: {
			query: {
				/** @description You want the attendees for this event ID */
				event: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetAttendees'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	addAttendees: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/** @example 1234 */
					event: number;
					attendees: {
						/** @example John */
						first_name: string;
						/** @example Doe */
						last_name: string;
						/** @example johndoe@mail.com */
						email: string;
						/** @example 1234 */
						user?: number | null;
					}[];
				};
			};
		};
		responses: {
			/** @description attendees created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						attendees?: {
							/** @example 2345 */
							id?: number;
							/** @example John */
							first_name?: string;
							/** @example Doe */
							last_name?: string;
							/** @example johndoe@mail.com */
							email?: string;
							/** @example 1243 */
							user_id?: number;
						}[];
					};
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	checkinAttendee: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description ID of the event to check in the attendee to.
					 * @example 1234
					 */
					event: number;
					attendees: {
						/**
						 * @description The ID of the attendee to check in.
						 * @example 3456
						 */
						id?: number;
						/**
						 * @description true if checking in the attendee, false otherwise
						 * @example true
						 */
						is_checked_in?: boolean;
					}[];
				};
			};
		};
		responses: {
			/** @description attendees created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 3456 */
						id?: number;
						/** @example true */
						is_checked_in?: boolean;
					}[];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getAttendeeSearch: {
		parameters: {
			query: {
				/** @description The ID of the event to retrieve the attendee list for. */
				event: number;
				/** @description Sort the results by this value. Possible values include first_name, last_name, and created_date. Prefix the value with"-" for descending order. Default is first_name. */
				order_by?: string;
				/** @description Filter the list to attendees that have the specified value in either first_name, last_name, email, or ticket_title. */
				search?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetAttendeeSearch'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getAttendeeById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the attendee to retrieve. */
				attendee_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetAttendeeById'];
				};
			};
			/** @description The attendee ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	deleteAttendee: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the attendee to remove. */
				attendee_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description attendee deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The attendee ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	deleteAllAttendeesByEvent: {
		parameters: {
			query: {
				/** @description The user ID to remove the attendee registrations for. */
				userid: number;
			};
			header?: never;
			path: {
				/** @description The ID of the event to remove the attendee registrations from. */
				event_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description attendee deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The event ID or user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getMainStageVideo: {
		parameters: {
			query: {
				/** @description The ID of the event to retrieve the main stage video for. You can find this in the Bevy dashboard, by looking at the URL of the event */
				event: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetMainStageVideo'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The video is not ready yet or the event ID doesn't exist. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example Server Error (500) */
						error?: string;
					};
				};
			};
		};
	};
	getSessionVideoIds: {
		parameters: {
			query: {
				/** @description The ID of the event Found in the URL path of an event in the bevy Dashboard */
				event: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetSessionVideoIds'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The video is not ready yet or the event ID doesn't exist. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example Server Error (500) */
						error?: string;
					};
				};
			};
		};
	};
	getSessionVideoURLs: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the recording, as found in the Session Video ID api call */
				archive_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful redirect to download link. A pop-up window will appear asking you to download and save a file */
			302: {
				headers: {
					Location?: string;
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The video ID doesn't exist. */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['404Error'];
				};
			};
		};
	};
	getChapterStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterStatus'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getChapterRegions: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 1 */
						id?: number;
						/** @example 1 */
						order?: number;
						/** @example North America */
						title?: string;
					}[];
				};
			};
		};
	};
	listChapters: {
		parameters: {
			query?: {
				/** @description The fields to include in the response. Possible values include<br> Adding `?fields=<query>` will allow you to query any or all of the following (separate parameters using ,)<br> Note that the more parameters you put into the query, the longer the response time.<br> Fields can be ```active, allow_internal_list_management, available_months_last_12, banner_crop_vertical, blog_category, chapter_lists, chapter_location, chapter_photos, chapter_team, city, could_update_meetup, country, country_name, created, currency, description, event_activity_percentage_last_12, facebook_page, featured_video_url, flickr_page, health_indicator, id, import_wp_events, imported_id, instagram_handle, is_city, is_hidden, is_production_chapter, language, latitude, linkedin_page, logo, longitude, mailchimp_api_key, mailchimp_list_id, media_partners, media_partners_inactive, meetup_api_key, meetup_group, monthly_events_last_12, on_team, payee_setup_process_url, payment_lead, picture, region, relative_url, rsvp_events_only, sponsors, sponsors_inactive, state, status, ticket_revenue_share_percentage, timezone, timezone_utc_offset, title, total_tickets_sold_lifetime, twitter_handle, url, use_external_ticketing, use_new_newsletters, website``` */
				fields?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ListChapters'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	createChapter: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['CreateChapterBody'];
			};
		};
		responses: {
			/** @description Chapter created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Chapter'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getChapterById: {
		parameters: {
			query?: {
				/** @description A comma-separated list of fields to include in the response.<br> Allows specifying what fields to retrieve for the requested chapter. When not specified, only some fields are included.<br> Fields can be ```active, allow_internal_list_management, available_months_last_12, banner_crop_vertical, blog_category, chapter_lists, chapter_location, chapter_photos, chapter_team, city, could_update_meetup, country, country_name, created, currency, description, event_activity_percentage_last_12, facebook_page, featured_video_url, flickr_page, health_indicator, id, import_wp_events, imported_id, instagram_handle, is_city, is_hidden, is_production_chapter, language, latitude, linkedin_page, logo, longitude, mailchimp_api_key, mailchimp_list_id, media_partners, media_partners_inactive, meetup_api_key, meetup_group, monthly_events_last_12, on_team, payee_setup_process_url, payment_lead, picture, region, relative_url, rsvp_events_only, sponsors, sponsors_inactive, state, status, ticket_revenue_share_percentage, timezone, timezone_utc_offset, title, total_tickets_sold_lifetime, twitter_handle, url, use_external_ticketing, use_new_newsletters, website``` */
				fields?: string[];
			};
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Chapter'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listChapterEvents: {
		parameters: {
			query?: {
				/** @description Sort the results by this value. Possible values `id, title, start_date, end_date`.<br> Prefix value with '-' to specify descending order. Default is start_date descending. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve events for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterEventList'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listChapterMembers: {
		parameters: {
			query?: {
				/** @description Sort the results by this value. Possible values `id, created_date`.<br> Prefix value with '-' to specify descending order. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterMemberList'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	addChapterMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description Current User's ID
					 * @example 1234
					 */
					user_id: number;
				};
			};
		};
		responses: {
			/** @description Chapter member created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': Record<string, never>;
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listChapterTeam: {
		parameters: {
			query?: {
				/** @description Sort the results by this value. Possible values `id, created_date`.<br> Prefix value with '-' to specify descending order. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterTeamList'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	addChapterTeamMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['ChapterTeamMemberBody'];
			};
		};
		responses: {
			/** @description Chapter team member created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterTeamMemberFull'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	updateChapterTeamMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
				/** @description The ID of the team member to update. */
				team_id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['ChapterTeamMemberBody'];
			};
		};
		responses: {
			/** @description Chapter team member updated. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterTeamMemberFull'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The chapter ID or team member ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	deleteChapterTeamMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
				/** @description The ID of the team member to delete. */
				team_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Chapter team member deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The chapter ID or team member ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	partialUpdateChapterTeamMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
				/** @description The ID of the team member to update. */
				team_id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['ChapterTeamMemberBody'];
			};
		};
		responses: {
			/** @description Chapter team member updated. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ChapterTeamMemberFull'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The chapter ID or team member ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	addChapterMembers: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description These users consent to their signup and agree to the terms and conditions.
					 * @example true
					 */
					signup_consent?: boolean;
					/**
					 * @description How the users consented.
					 * @example Filled the form
					 */
					consent_reason?: string;
					/**
					 * @description Determines whether the import should be run synchronously or asynchronously. In general, imports should be run asynchronously due to the time imports take. Default is false.
					 * @default false
					 * @example true
					 */
					async?: boolean;
					members: {
						/** @example user@mail.com */
						email: string;
						/** @example John */
						first_name: string;
						/** @example Doe */
						last_name: string;
					}[];
				};
			};
		};
		responses: {
			/** @description Chapter members created. Synchronous only */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 1234 */
						id?: number;
						tags?: string[];
						user?: components['schemas']['User'];
						chapter?: components['schemas']['Chapter'];
						/** @example 2024-01-09T17:59:22Z */
						created_date?: string;
						/** @example 2024-01-09T17:59:22Z */
						departure_date?: string | null;
						event_attendance_stats?: Record<string, never>;
						event_tickets_stats?: Record<string, never>;
						events_registered?: components['schemas']['EventSummary'][];
						/** @example 1 */
						events_registered_count?: number;
						user_preferences_memberships?: Record<string, never>;
					}[];
				};
			};
			/** @description Chapter members queued for creation. Asynchronous only */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 1234 */
						chapter_member_import_id?: number;
						/** @example https://instance.bevy.com/api/chapter/1/members/import/1234/status */
						status_url?: string;
					};
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The chapter ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	deleteChapterMember: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chapter to retrieve members for. */
				chapter_id: number;
				/** @description The ID of the chapter member to delete. */
				chapter_member_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Chapter member deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The chapter ID or chapter member ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listCohostedEvents: {
		parameters: {
			query?: {
				/** @description Filter by the ID of the Event being cohosted<br> This query effectively filters show chapters related to the source event. The source chapter will not be listed. */
				source_event?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CohostedEventList'];
				};
			};
			/** @description The token do not have permission to perform this action or is invalid */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['401Error'];
				};
			};
		};
	};
	deleteCohostedEvent: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the cohosted event to remove. */
				cohosted_event_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description cohosted event deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The token do not have permission to perform this action or is invalid */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['401Error'];
				};
			};
		};
	};
	addAllChaptersAsEventCohosts: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description Id of the event that will be the _source_event_ of the CohostedEvent entities.
					 * @example 1234
					 */
					source_event: number;
				};
			};
		};
		responses: {
			/** @description All chapters added as cohosts. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['CohostedEvent'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The token do not have permission to perform this action or is invalid */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
			/** @description Cohosting is not enabled in the instance */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['404Error'];
				};
			};
		};
	};
	chaptersUserCanAddAsCohost: {
		parameters: {
			query?: {
				/** @description filter by the ID of the cohosted event */
				event_id?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown[];
				};
			};
			/** @description The token do not have permission to perform this action or is invalid */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
			/** @description Cohosting is not enabled in the instance */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['404Error'];
				};
			};
		};
	};
	getEventCounts: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 1234 */
						count?: number;
					};
				};
			};
		};
	};
	getEventById: {
		parameters: {
			query?: {
				/** @description Use to include agenda information for BVC conferences. For BV agendas, this is ignored.<br> Includes an audience_type field for each segment. This can be `null`, `IN_PERSON`, `HYBRID`, or `VIRTUAL` */
				include_agenda?: boolean;
			};
			header?: never;
			path: {
				/** @description The ID of the event to retrieve. */
				event_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['EventFull'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listEvents: {
		parameters: {
			query?: {
				/** @description Filters the list to only include events after the specified date.<br> Must be used together with end_date.<br> Format `YYYY-MM-DD` */
				start_date?: string;
				/** @description Filters the list to only include events before the specified date.<br> Must be used together with start_date.<br> Format `YYYY-MM-DD` */
				end_date?: string;
				/** @description Filters the list to only include events of the specified type. */
				event_type_id?: number;
				/** @description Filters the list to only include events of the specified event type slug. */
				event_type?: string;
				/** @description Filters the list to only include events for the specified chapter. */
				chapter?: number;
				/** @description Filters the list of events by status. The values in this filter contain additional ones to the strict 'status' values of the events, check the notes for each filter value.<br>Possible values:<br> <ul> <li>Draft</li> <li>Pending</li> <li>Published</li> <li>Live <small>Published events that have an end date later than the current date.</small></li> <li>Canceled</li> <li>Completed <small>Published events with an end date earlier than now.</small></li> </ul> */
				status?: string;
				/** @description Allows specifying what fields to return for each event.<br> Can use any of the fields listed in the event details endpoint separated by commas. */
				fields?: string;
				/** @description Sort the results by this value. Possible values `id, title, chapter_id, end_date`.<br> Prefix value with '-' to specify descending order. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
				/** @description Use to filter for events that have cohosting enabled. */
				allow_cohosting?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['EventList'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listEventTypes: {
		parameters: {
			query?: {
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['EventTypeList'];
				};
			};
		};
	};
	getEventTypeById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the event type to retrieve. */
				event_type_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['EventType'];
				};
			};
			/** @description The event type ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listEventAttendees: {
		parameters: {
			query?: {
				/** @description Sort the results by this value. Possible values `id, created_date`.<br> Prefix value with '-' to specify descending order. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path: {
				/** @description The ID of the event to retrieve attendees for. */
				event_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetAttendeesResult'];
				};
			};
			/** @description The event ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listEventTags: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 10 */
						count?: number;
						/** @example https://instance.bevy.com/api/event/tag/?page=2 */
						next?: string;
						/** @example null */
						previous?: string;
						/** @example [
						 *       "tag1",
						 *       "tag2"
						 *     ] */
						results?: string[];
					};
				};
			};
		};
	};
	searchChapters: {
		parameters: {
			query?: {
				/** @description The search query. */
				q?: string;
				/** @description The latitude of the location to search around. `-90.0 … +90.0`.<br> Default is unset. */
				latitude?: number;
				/** @description The longitude of the location to search around. `-180.0 … +180.0`.<br> Default is unset. */
				longitude?: number;
				/** @description The radius in kilometers to search around the location specified by latitude and longitude. `1 … 20,000`<br> Default is 50. */
				around_radius?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SearchChapterResult'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	searchEvents: {
		parameters: {
			query?: {
				/** @description past or upcoming (including live) or live events. values can be<br> <ul> <li>past</li> <li>live</li> <li>upcoming</li> <li>upcoming_only</li> </ul> */
				status?: string;
				/** @description The search query. */
				q?: string;
				/** @description The latitude of the location to search around. Filters by chapter's location hosting the event. `-90.0 … +90.0`.<br> Default is unset. */
				latitude?: number;
				/** @description The longitude of the location to search around. Filters by chapter's location hosting the event. `-180.0 … +180.0`.<br> Default is unset. */
				longitude?: number;
				/** @description The radius in kilometers to search around the location specified by latitude and longitude. `1 … 20,000`<br> Default is 50. */
				around_radius?: number;
				/** @description The ID of the chapter to retrieve events for. */
				chapter?: number;
				/** @description The ID of the region to retrieve events for. */
				region_id?: number;
				/**
				 * @description Event type ids to filter events by.
				 * @example event_types_ids=1&event_types_ids=2
				 */
				event_type_ids?: string;
				/**
				 * @description Event tag ids to filter events by.
				 * @example event_tags_ids=meetup&event_tags_ids=learning
				 */
				event_tags_ids?: string;
				/** @description The relative event type to filter events by. Values can be<br> <ul> <li>BVC</li> <li>BV</li> <li>in-person</li> </ul> */
				mobile_relative_event_type?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['SearchEventResult'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listUsers: {
		parameters: {
			query?: {
				/** @description Gather information from specific user fields. `id, first_name, last_name, full_name, email, last_login, deleted_date, date_joined, city, country, role, chapter_memberships, chapter_teams,authentication_providers, bio, timezone, username`<br> Default is `id,first_name,last_name,email,last_login,deleted_date` */
				fields?: string;
				/** @description Sort the results by this value. Possible values `id, first_name, lastname, email, last_login, deleted_date`.<br> Prefix value with '-' to specify descending order. */
				order_by?: string;
				/** @description The number of records to return per page. Default is 500. Maximum is 500. */
				page_size?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserList'];
				};
			};
			/** @description The token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getUserByIdOrEmail: {
		parameters: {
			query?: {
				/** @description Allows specifying what fields to return for each user.<br> Can use any of the fields listed in the user details endpoint separated by commas. */
				fields?: string;
			};
			header?: never;
			path: {
				/** @description The ID or email of the user to retrieve. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['User'];
				};
			};
			/** @description The user ID or email doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	deleteUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to delete. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User deleted. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	updateUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to update. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/** @example John */
					first_name?: string;
					/** @example Doe */
					last_name?: string;
					/**
					 * @description Company or group the user is associated with company
					 * @example Bevy
					 */
					company?: string;
					/** @example Software Engineer */
					title?: string;
					/** @example Gotham */
					city?: string;
					/**
					 * @description ISO 3166-1 alpha-2 country code
					 * @example CA
					 */
					country?: string;
					/**
					 * @description Background biography for the user
					 * @example I'm a software engineer
					 */
					bio?: string;
					/** @example America/Los_Angeles */
					timezone?: string;
					/**
					 * @description Array of user's tags, by name
					 * @example [
					 *       "tag1",
					 *       "tag2"
					 *     ]
					 */
					tags?: string[];
					/** @example https://bevy.com */
					website?: string;
					/**
					 * @description The user's Twitter handle
					 * @example bevy
					 */
					twitter?: string;
					/**
					 * @description The user's LinkedIn profile URL
					 * @example bevy
					 */
					linkedin?: string;
					/**
					 * @description The user's Facebook profile URL
					 * @example bevy
					 */
					facebook?: string;
				};
			};
		};
		responses: {
			/** @description User updated. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['User'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
			/** @description The user has already signed in and can only update their information using this API. */
			406: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	deactivateUser: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description The email of the user to deactivate.
					 * @example user@mail.com
					 */
					email?: string;
					/**
					 * @description The ID of the user to deactivate.
					 * @example 1234
					 */
					user_id?: string;
				};
			};
		};
		responses: {
			/** @description User deactivated. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listUserEvents: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to retrieve events for. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserEventsList'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listUserChapters: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to retrieve chapters for. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserChaptersList'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	listUserChapterTeams: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to retrieve chapter teams for. */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserChapterTeamsList'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	createProspectiveUser: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/** @example user@mail.com */
					email: string;
					/** @example John */
					first_name: string;
					/** @example Doe */
					last_name: string;
					/**
					 * @description Whether to send new user welcome emails to the newly created user. Default to false.
					 * @example true
					 */
					send_welcome_emails?: boolean;
				};
			};
		};
		responses: {
			/** @description Prospective user created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['User'];
				};
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The token do not have permission to perform this action or is invalid */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	optOutOfEmails: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': {
					/**
					 * @description The ID of the user to opt out of emails.
					 * @example 1234
					 */
					user_id?: string;
				};
			};
		};
		responses: {
			/** @description User opted out of emails. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description The request is invalid. The rational will be in the response body. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['400Error'];
				};
			};
			/** @description The user ID doesn't exist, or the token do not have permission to perform this action or */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['403Error'];
				};
			};
		};
	};
	getUserCounts: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': {
						/** @example 100 */
						total?: number;
						/** @example 50 */
						User?: number;
						/** @example 20 */
						'Prospective User'?: number;
						/** @example 5 */
						Administrator?: number;
						/** @example 25 */
						Inactive?: number;
					};
				};
			};
		};
	};
}
